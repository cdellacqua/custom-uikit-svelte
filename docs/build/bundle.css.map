{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../AsyncDataTable.svelte",
    "../../Form.svelte",
    "../../FormModal.svelte",
    "../../LoaderOverlay.svelte",
    "../../LoaderOverlayScoped.svelte",
    "../../Modal.svelte",
    "../../OrderableList.svelte",
    "../../Table.svelte",
    "../../AsyncAutocomplete.svelte",
    "../../Field.svelte",
    "../../NumberInput.svelte",
    "../../PasswordInputAlt.svelte",
    "../../Radio.svelte",
    "../../SearchInput.svelte",
    "../../TextInput.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher, onMount } from \"svelte\";\n  import Button from \"./Button.svelte\";\n  import SearchInput from \"./form/SearchInput.svelte\";\n  import LoaderOverlayScoped from \"./LoaderOverlayScoped.svelte\";\n  import { debounce } from \"debounce\";\n  import Pagination from \"./Pagination.svelte\";\n  import { sleep } from \"../helpers/time\";\n\n  /** @type {Array<{label: string, key: string, className: string|undefined, textAlign: 'center'|'right'|'left'|undefined, orderable: boolean|undefined, searchable: boolean|undefined, render: DataTableRenderer|undefined}>} */\n  export let columns = [];\n  /** @type {undefined|'small'} */\n  export let size = undefined;\n  /** @type {undefined|string} */\n  export let className = undefined;\n  /**\n   * @description A string specifying custom style properties for the component\n   * @type {string|undefined} */\n  export let style = undefined;\n  /** @type {'divider'|'striped'} */\n  export let appearance = \"divider\";\n  /** @type {'default'|'primary'|'secondary'|'danger'|'text'|'link'} */\n  export let searchButtonVariant = \"default\";\n  /** @type {boolean} */\n  export let stickyHeader = false;\n  /** @type {string} */\n  export let placeholder = \"\";\n  /** @type {string|undefined} */\n  export let noResultText = undefined;\n  /** @type {HTMLTableElement} */\n  export let ref = undefined;\n  /** @type {boolean} @default true */\n  export let instantSearch = true;\n  /** @type {string} */\n  export let query = \"\";\n  /** @type {Array<{key: string, direction: 'desc'|'asc'}>} */\n  export let orderBy = [];\n  /** @type {boolean} @default true */\n  export let horizontalScroll = true;\n  /** @type {AsyncDataTableDataProvider} */\n  export let dataProvider;\n  /** @type {CallableFunction} */\n  export let dataProviderErrorHandler = (err) => console.error(err);\n  /** @type {number} */\n  export let recordsPerPage = 25;\n  /** @type {number} */\n  export let numbersPerSide = 4;\n  /** @type {number} */\n  export let pageIndex = 0;\n  /** @type {number} @readonly */\n  export let total = 0;\n  /** @type {number} @readonly */\n  export let filtered = 0;\n  /** @type {boolean} @readonly */\n  export let loading = false;\n  /** @type {number} */\n  export let debounceMs = 200;\n  /**\n   * @description Contains the current visible rows\n   * @type {Array<Record<string, any>>|null}\n   * @default null */\n  export let rows = null;\n\n  const dispatch = createEventDispatcher();\n\n  $: dispatch(\"query\", query);\n\n  function changeOrderBy(key, append) {\n    if (append) {\n      const existingSortIndex = orderBy.findIndex((o) => o.key === key);\n      if (existingSortIndex > -1) {\n        if (orderBy[existingSortIndex].direction === \"asc\") {\n          orderBy[existingSortIndex].direction = \"desc\";\n        } else {\n          orderBy.splice(existingSortIndex, 1);\n          orderBy = [...orderBy];\n        }\n      } else {\n        orderBy = [...orderBy, { key: key, direction: \"asc\" }];\n      }\n    } else {\n      if (\n        orderBy.length === 0 ||\n        orderBy.length > 1 ||\n        orderBy[0].key !== key\n      ) {\n        orderBy = [{ key: key, direction: \"asc\" }];\n      } else if (orderBy[0].direction === \"asc\") {\n        orderBy = [{ key: key, direction: \"desc\" }];\n      } else {\n        orderBy = [];\n      }\n    }\n  }\n\n  let externalAssignment = true;\n  function handleExternalAssignment() {\n    if (debouncedReload.clear) {\n      debouncedReload.clear();\n    }\n    debouncedReload();\n  }\n  $: if (orderBy || pageIndex >= 0 || recordsPerPage >= 0) {\n    if (externalAssignment) {\n      handleExternalAssignment();\n    }\n    externalAssignment = true;\n  }\n\n  let lastQuery = null;\n  let lastOrderBy = null;\n  let lastRecordsPerPage = null;\n  let lastPageIndex = null;\n  let forceUpdate = false;\n  async function _reload() {\n    if (\n      !loading &&\n      (forceUpdate ||\n        query !== lastQuery ||\n        JSON.stringify(orderBy) !== JSON.stringify(lastOrderBy) ||\n        lastRecordsPerPage !== recordsPerPage ||\n        lastPageIndex !== pageIndex)\n    ) {\n      loading = true;\n      try {\n        let providerQuery = lastQuery;\n        let providerRecordsPerPage = lastRecordsPerPage;\n        let providerOrderBy = lastOrderBy;\n        let providerPageIndex = lastPageIndex;\n        let data;\n        let debounce = false;\n\n        function updateProviderArgs() {\n          providerQuery = query;\n          providerRecordsPerPage = recordsPerPage;\n          providerOrderBy = orderBy.map((o) => ({ ...o }));\n          providerPageIndex = pageIndex;\n        }\n\n        function providerArgsChanged() {\n          return (\n            providerQuery !== query ||\n            providerRecordsPerPage !== recordsPerPage ||\n            JSON.stringify(providerOrderBy) !== JSON.stringify(orderBy) ||\n            providerPageIndex !== pageIndex ||\n            forceUpdate\n          );\n        }\n\n        do {\n          do {\n            if (recordsPerPage !== providerRecordsPerPage) {\n              pageIndex = Math.floor(\n                (lastPageIndex * providerRecordsPerPage) / recordsPerPage\n              );\n            }\n            if (query !== providerQuery) {\n              pageIndex = 0;\n            }\n\n            forceUpdate = false;\n            updateProviderArgs();\n            if (debounce && debounceMs > 0) {\n              await sleep(debounceMs);\n            }\n          } while (providerArgsChanged());\n\n          data = await dataProvider(query, orderBy, recordsPerPage, pageIndex);\n\n          debounce = true;\n        } while (providerArgsChanged());\n\n        rows = data.records;\n        filtered = data.filtered;\n        total = data.total || data.filtered;\n\n        lastQuery = query;\n        lastRecordsPerPage = recordsPerPage;\n        lastOrderBy = orderBy.map((o) => ({ ...o }));\n        lastPageIndex = pageIndex;\n\n        externalAssignment = false;\n      } catch (err) {\n        dataProviderErrorHandler(err);\n      } finally {\n        loading = false;\n      }\n    }\n  }\n\n  export function reload() {\n    forceUpdate = true;\n    return _reload();\n  }\n\n  const debouncedReload =\n    debounceMs > 0 ? debounce(_reload, debounceMs) : _reload;\n\n  /** @type {HTMLInputElement} */\n  let searchInput;\n\n  let loaderTop = 0;\n  let loaderHeight = 0;\n\n  function updateLoaderTop() {\n    const th = ref && ref.querySelector(\"th\");\n    loaderTop = th ? th.offsetHeight : 0;\n  }\n  onMount(() => {\n    updateLoaderTop();\n  });\n</script>\n\n{#if columns.some((c) => c.searchable !== false)}\n  <form\n    on:submit|preventDefault={() => {\n      if (debouncedReload.clear) {\n        debouncedReload.clear();\n      }\n      query = searchInput.value;\n      searchInput.blur();\n      debouncedReload();\n    }}\n    class=\"uk-flex uk-width-1-1 custom-uk-data-table-form\"\n  >\n    {#if instantSearch}\n      <SearchInput\n        className=\"uk-width-expand\"\n        bind:ref={searchInput}\n        {placeholder}\n        bind:value={query}\n        on:input={() => {\n          if (debouncedReload.clear) {\n            debouncedReload.clear();\n          }\n          debouncedReload();\n        }}\n        optional\n      />\n    {:else}\n      <SearchInput\n        className=\"uk-width-expand\"\n        bind:ref={searchInput}\n        {placeholder}\n        value={query}\n        optional\n      />\n    {/if}\n    <Button\n      type=\"search\"\n      icon=\"search\"\n      on:click={() => reload()}\n      variant={searchButtonVariant}\n      className=\"uk-padding-small uk-padding-remove-vertical uk-margin-bottom\"\n    />\n  </form>\n{/if}\n<svelte:window on:resize={() => updateLoaderTop()} />\n<div style=\"position: relative\">\n  <div\n    class:table-hscroll-wrapper={horizontalScroll}\n    class=\"custom-uk-data-table-table-wrapper\"\n  >\n    <table\n      class:uk-margin-remove={true}\n      bind:this={ref}\n      {style}\n      class:uk-table={true}\n      class:uk-table-middle={true}\n      class:uk-table-hover={true}\n      class={className}\n      class:uk-table-striped={appearance === \"striped\"}\n      class:uk-table-divider={appearance === \"divider\"}\n      class:uk-table-small={size === \"small\"}\n    >\n      <thead>\n        <tr>\n          {#each columns as col (col)}\n            <th\n              tabindex=\"0\"\n              style=\"text-align: {col.textAlign || 'left'}\"\n              class:sticky={stickyHeader}\n              class:descending={Object.keys(orderBy).some(\n                (key) => key === col.key && orderBy[key] === -1\n              )}\n              on:click={(e) => {\n                if (col.orderable !== false) {\n                  changeOrderBy(col.key, e.shiftKey);\n                }\n              }}\n              on:keyup={(e) => {\n                if (e.code === \"Enter\") {\n                  if (col.orderable !== false) {\n                    changeOrderBy(col.key, e.shiftKey);\n                  }\n                }\n              }}\n              on:contextmenu={(e) => {\n                if (col.orderable !== false) {\n                  e.preventDefault();\n                  changeOrderBy(col.key, true);\n                  window.navigator.vibrate?.(50);\n                }\n              }}\n              class:orderable={col.orderable !== false}\n            >\n              {col.label}\n              {#if col.orderable !== false && orderBy.find((o) => o.key === col.key)?.direction === \"asc\"}\n                <span class=\"uk-icon\" uk-icon=\"icon: chevron-up\" />\n              {:else if col.orderable !== false && orderBy.find((o) => o.key === col.key)?.direction === \"desc\"}\n                <span class=\"uk-icon\" uk-icon=\"icon: chevron-down\" />\n              {:else if col.orderable !== false}\n                <span\n                  style=\"visibility: hidden\"\n                  class=\"uk-icon\"\n                  uk-icon=\"icon: chevron-down\"\n                />\n              {/if}\n            </th>\n          {/each}\n        </tr>\n      </thead>\n      <tbody class:inhibit={loading} bind:offsetHeight={loaderHeight}>\n        {#if !rows}\n          <tr>\n            <td colspan={columns.length} class:uk-text-center={true} />\n          </tr>\n        {:else if rows.length === 0 && noResultText}\n          <tr>\n            <td\n              colspan={columns.length}\n              style=\"font-style: italic; text-align: center\"\n            >\n              {noResultText}\n            </td>\n          </tr>\n        {:else}\n          {#each rows as row (row)}\n            <tr\n              tabindex=\"0\"\n              on:keyup={(e) =>\n                [\"Enter\"].includes(e.code) && dispatch(\"row-click\", row)}\n              on:dblclick={() => dispatch(\"row-dblclick\", row)}\n              on:click={() => dispatch(\"row-click\", row)}\n            >\n              {#each columns.map((col) => ({\n                ...col,\n                rendered: col.render && col.render(row[col.key], row),\n              })) as col (col)}\n                <td\n                  class={col.className}\n                  style=\"text-align: {col.textAlign || 'left'}\"\n                >\n                  {#if !col.render}\n                    {row[col.key]}\n                  {:else if col.rendered && typeof col.rendered === \"object\"}\n                    <svelte:component\n                      this={col.rendered.component}\n                      {...col.rendered.props || {}}\n                      on:click={(e) => {\n                        const onClick = col.rendered.onClick;\n                        if (onClick) {\n                          e.stopPropagation();\n                          onClick(e);\n                        }\n                      }}\n                    >\n                      {col.rendered.textContent || \"\"}\n                    </svelte:component>\n                  {:else}{col.rendered || \"\"}{/if}\n                </td>\n              {/each}\n            </tr>\n          {/each}\n        {/if}\n      </tbody>\n    </table>\n    {#if loading}\n      <div\n        style={`position: absolute; left: 0; right: 0; height: ${loaderHeight}px; top: ${loaderTop}px; z-index: 999999`}\n      >\n        <LoaderOverlayScoped opacity={0.2} />\n      </div>\n    {/if}\n  </div>\n  <Pagination\n    center\n    numberOfPages={Math.ceil(filtered / recordsPerPage)}\n    {pageIndex}\n    {numbersPerSide}\n    on:page-click={({ detail }) => (pageIndex = detail)}\n  />\n</div>\n\n<style>\n  th {\n    white-space: nowrap;\n  }\n  th.sticky {\n    top: 0;\n    position: sticky;\n    background-color: #fff;\n  }\n\n  .orderable {\n    cursor: row-resize;\n  }\n\n  .table-hscroll-wrapper {\n    max-width: 100%;\n    overflow-x: auto;\n  }\n\n  th .uk-icon {\n    width: 20px;\n  }\n\n  th {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n        user-select: none;\n  }\n\n  .inhibit {\n    pointer-events: none;\n  }</style>\n",
    "<script>\n  import { setContext } from \"svelte\";\n  import { readable } from \"svelte/store\";\n  import { noop } from \"../helpers/lambdas\";\n\n  /** @type {FormSubmitCallback} */\n  export let submitAsync;\n  /** @type {boolean} */\n  export let disabled = false;\n  /** @type {'initial'|'invalid'|'valid'|'loading'|'error'|'success'} */\n  export let state = \"initial\";\n  /**\n   * @description Indicates the validity of this form. Its value is updated using formRef.checkValdity(), that gets called\n   * each time an element inside this form triggers a bubbling 'change' event\n   * @type {boolean} @readonly */\n  export let valid = true;\n  /** @type {HTMLFormElement} */\n  export let ref = undefined;\n  /** \n\t * @description A string specifying custom style properties for the component\n\t * @type {string|undefined} */\n  export let style = undefined;\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {'stacked'|'horizontal'} */\n  export let variant = \"stacked\";\n\n  async function handleSubmit() {\n    if (submitAsync) {\n      setState(\"loading\");\n      try {\n        await submitAsync();\n        setState(\"success\");\n      } catch (err) {\n        setState(\"error\");\n        throw err;\n      }\n    }\n  }\n\n  let setState = noop;\n  /** @type {Readable<'initial'|'invalid'|'valid'|'loading'|'error'|'success'>} */\n  let stateStore = readable(\"initial\", (set) => {\n    setState = (state) => {\n      set(state);\n    };\n    return () => {\n      setState = noop;\n    };\n  });\n\n  setContext(\"form\", stateStore);\n\n  $: {\n    state = $stateStore;\n  }\n\n  $: if (!valid) {\n    setState(\"invalid\");\n  } else {\n    setState(\"valid\");\n  }\n</script>\n\n<style>\n  .disabled {\n    pointer-events: none;\n  }\n\n  form {\n    display: block;\n  }</style>\n\n<form\n  {style}\n  class={className}\n  class:uk-form-horizontal={variant === 'horizontal'}\n  class:uk-form-stacked={variant === 'stacked'}\n  bind:this={ref}\n  on:change={() => (valid = ref.checkValidity())}\n  on:submit|preventDefault={handleSubmit}\n  class:disabled={state === 'loading' || disabled}>\n  <slot />\n</form>\n",
    "<script>\n  import { createEventDispatcher, onDestroy, onMount, tick } from \"svelte\";\n  import Form from \"./Form.svelte\";\n  import UIkit from \"uikit\";\nimport { dispatchCustomEvent } from \"../helpers/events\";\n\n  /** @type {string|undefined} */\n  export let id = undefined;\n  /**@type {string|undefined} */\n  export let style = undefined;\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {string|undefined} */\n  export let title = undefined;\n  /** @type {boolean} */\n  export let expand = false;\n  /** @type {boolean} */\n  export let fullScreen = false;\n  /** @type {boolean} */\n  export let closeable = true;\n  /** @type {'default'|'outside'} */\n  export let closeButton = \"default\";\n  /** @type {boolean} */\n  export let verticallyCentered = true;\n  /** @type {HTMLDivElement} */\n  export let ref = undefined;\n  /** @type {boolean} */\n  export let show = false;\n  /** @type {boolean} @readonly */\n  export let shown = false;\n  /** @type {boolean} */\n  export let stack = true;\n\n  // FORM PROPS\n\n  /** @type {FormSubmitCallback} */\n  export let formSubmitAsync;\n  /** @type {boolean} */\n  export let formDisabled = false;\n  /** @type {'initial'|'invalid'|'valid'|'loading'|'error'|'success'} */\n  export let formState = \"initial\";\n  /** @type {boolean} */\n  export let formValid = true;\n  /** @type {HTMLFormElement} */\n  export let formRef = undefined;\n  /**\n   * @description A string specifying custom style properties for the component\n   * @type {string|undefined} */\n  export let formStyle = undefined;\n  /** @type {string|undefined} */\n  export let formClassName = '';\n  /** @type {'stacked'|'horizontal'} */\n  export let formVariant = \"stacked\";\n\n  let externalAssignment = true;\n  $: if (ref) {\n    if (externalAssignment) {\n      if (show && !ref.classList.contains('uk-open')) {\n        UIkit.modal(ref).show();\n      } else if (!show && ref.classList.contains('uk-open')) {\n        UIkit.modal(ref).hide();\n      }\n    }\n    externalAssignment = true;\n  }\n\n  onDestroy(() => {\n    if (show) {\n      dispatchCustomEvent(ref, 'hide');\n    }\n    if (shown) {\n      dispatchCustomEvent(ref, 'hidden');\n    }\n  });\n\n  function handleShow() {\n    externalAssignment = false;\n    show = true;\n  }\n\n  function handleHide() {\n    externalAssignment = false;\n    show = false;\n  }\n\n  let previouslyFocusedRef;\n  function handleShown() {\n    shown = true;\n    previouslyFocusedRef = document.activeElement;\n    ref && ref.focus();\n  }\n\n  async function handleHidden() {\n    shown = false;\n    await tick();\n    previouslyFocusedRef && previouslyFocusedRef.focus();\n  }\n\n  let noHeader;\n  let noFooter;\n\n  let forceHide = false;\n</script>\n\n<style>\n  :global(form.fullscreen-dialog-6554ef564e5f4e5r4g6er4ger4g8ergwe65r) {\n    display: flex;\n    flex-flow: column;\n    height: 100vh;\n  }\n  .fullscreen-footer {\n    margin-top: auto;\n  }</style>\n\n<div\n  tabindex=\"0\"\n  on:show={handleShow}\n  on:hide={handleHide}\n  on:beforehide={(e) => {\n    if (!forceHide && formState === 'loading') {\n      e.preventDefault();\n    }\n  }}\n  on:shown={handleShown}\n  on:hidden={handleHidden}\n  on:show|stopPropagation\n  on:hide|stopPropagation\n  on:shown|stopPropagation\n  on:hidden|stopPropagation\n  on:beforeshow|stopPropagation\n  on:beforehide|stopPropagation\n  bind:this={ref}\n  class:uk-modal-full={fullScreen}\n  class={className}\n  {style}\n  {id}\n  uk-modal={`esc-close: ${closeable}; bg-close: ${closeable}; stack: ${stack}`}\n  class:uk-flex-top={verticallyCentered}>\n  <Form\n    submitAsync={async () => {\n      try {\n        await formSubmitAsync();\n      } finally {\n        if (show === false) {\n          if (ref && ref.classList.contains('uk-open')) {\n            forceHide = true;\n            UIkit.modal(ref).hide();\n            forceHide = false;\n          }\n        }\n      }\n    }}\n    disabled={formDisabled}\n    bind:state={formState}\n    bind:valid={formValid}\n    bind:ref={formRef}\n    style={formStyle}\n    className=\"uk-modal-dialog {expand ? 'uk-modal-container' : ''} {verticallyCentered ? 'uk-margin-auto-vertical' : ''} {fullScreen ? 'fullscreen-dialog-6554ef564e5f4e5r4g6er4ger4g8ergwe65r' : ''} {formClassName}\"\n    variant={formVariant}>\n    {#if closeable && closeButton}\n      <button\n        class:uk-modal-close-default={closeButton === 'default'}\n        class:uk-modal-close-outside={closeButton === 'outside'}\n        class:uk-modal-close-full={fullScreen}\n        type=\"button\"\n        uk-close />\n    {/if}\n    {#if title}\n      <div class=\"uk-modal-header\">\n        <h2 class=\"uk-modal-title\">{title}</h2>\n      </div>\n    {:else}\n      <div class=\"uk-modal-header\" style={noHeader ? 'display: none' : ''}>\n        <slot name=\"header\">\n          <div bind:this={noHeader} />\n        </slot>\n      </div>\n    {/if}\n    {#if !fullScreen}\n      <div class=\"uk-modal-body\" uk-overflow-auto>\n        <slot />\n      </div>\n    {:else}\n      <div class=\"uk-modal-body\">\n        <slot />\n      </div>\n    {/if}\n    <div class=\"uk-modal-footer\" style={noFooter ? 'display: none' : ''} class:fullscreen-footer={fullScreen}>\n      <slot name=\"footer\">\n        <div bind:this={noFooter} />\n      </slot>\n    </div>\n  </Form>\n</div>\n",
    "<script>\n  import { onDestroy } from \"svelte\";\n\n  import Loader from \"./Loader.svelte\";\n\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {number} */\n  export let ratio = 1;\n  /** @type {string|undefined} */\n  export let style = undefined;\n  /** @type {HTMLDivElement} */\n  export let ref = undefined;\n  /** @type {number} */\n  export let opacity = 0.8;\n  /** @type {boolean} */\n  export let loading = true;\n  /** @type {'default'|'muted'|'primary'|'secondary'} */\n  export let background = \"default\";\n  /** @type {string|undefined} */\n  export let backgroundClassName = undefined;\n  /** @type {string|undefined} */\n  export let backgroundStyle = undefined;\n  /** @type {'bottom'|'right'|'top'|'left'} @default 'bottom' */\n  export let slotPosition = \"bottom\";\n\n  let originalWrapperRef;\n  $: if (originalWrapperRef) {\n    if (loading) {\n      originalWrapperRef.removeChild(ref);\n      document.body.appendChild(ref);\n    } else {\n      document.body.removeChild(ref);\n      originalWrapperRef.appendChild(ref);\n    }\n  }\n\n  onDestroy(() => {\n    if (ref && ref.parentElement === document.body) {\n      document.body.removeChild(ref);\n      originalWrapperRef.appendChild(ref);\n    }\n  });\n</script>\n\n<style lang=\"scss\">.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999999999;\n}\n.overlay > div {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}</style>\n\n{#if loading}\n  <div bind:this={originalWrapperRef}>\n    <div class={className} class:overlay={true} bind:this={ref} {style}>\n      <div\n        style=\"opacity: {opacity}; {backgroundStyle || ''}\"\n        class:uk-background-muted={background === 'muted'}\n        class:uk-background-default={background === 'default'}\n        class:uk-background-primary={background === 'primary'}\n        class:uk-background-secondary={background === 'secondary'}\n        class={backgroundClassName} />\n      <div\n        class=\"uk-flex uk-flex-middle uk-flex-center\"\n        class:uk-flex-column={slotPosition === 'bottom' || slotPosition === 'top'}>\n        {#if slotPosition === 'bottom' || slotPosition === 'right'}\n          <Loader {ratio} />\n        {/if}\n        <slot />\n        {#if slotPosition === 'top' || slotPosition === 'left'}\n          <Loader {ratio} />\n        {/if}\n      </div>\n    </div>\n  </div>\n{/if}\n",
    "<script>\n  import Loader from \"./Loader.svelte\";\n\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {number} */\n  export let ratio = 1;\n  /** @type {string|undefined} */\n  export let style = undefined;\n  /** @type {HTMLDivElement} */\n  export let ref = undefined;\n  /** @type {number} */\n  export let opacity = 0.8;\n  /** @type {boolean} */\n  export let loading = true;\n  /** @type {'default'|'muted'|'primary'|'secondary'} */\n  export let background = 'default';\n  /** @type {string|undefined} */\n  export let backgroundClassName = undefined;\n  /** @type {string|undefined} */\n  export let backgroundStyle = undefined;\n  /** @type {'bottom'|'right'|'top'|'left'} @default 'bottom' */\n  export let slotPosition = \"bottom\";\n</script>\n\n<style lang=\"scss\">.overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999999999;\n}\n.overlay > div {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}</style>\n\n{#if loading}\n  <div\n    class:overlay={true}\n    bind:this={ref}\n    class={className}\n    {style}>\n    <div\n      style=\"opacity: {opacity}; {backgroundStyle || ''}\"\n      class:uk-background-muted={background === 'muted'}\n      class:uk-background-default={background === 'default'}\n      class:uk-background-primary={background === 'primary'}\n      class:uk-background-secondary={background === 'secondary'}\n      class={backgroundClassName}\n    ></div>\n    <div\n        class=\"uk-flex uk-flex-middle uk-flex-center uk-flex\"\n        class:uk-flex-column={slotPosition === 'bottom' || slotPosition === 'top'}>\n        {#if slotPosition === 'bottom' || slotPosition === 'right'}\n          <Loader {ratio} />\n        {/if}\n        <slot />\n        {#if slotPosition === 'top' || slotPosition === 'left'}\n          <Loader {ratio} />\n        {/if}\n      </div>\n  </div>\n{/if}",
    "<script>\n  import UIkit from \"uikit\";\n  import { createEventDispatcher, onDestroy, tick } from \"svelte\";\nimport { dispatchCustomEvent } from \"../helpers/events\";\n\n  /** @type {string|undefined} */\n  export let id = undefined;\n  /**@type {string|undefined} */\n  export let style = undefined;\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {string|undefined} */\n  export let title = undefined;\n  /** @type {boolean} */\n  export let expand = false;\n  /** @type {boolean} */\n  export let fullScreen = false;\n  /** @type {boolean} */\n  export let closeable = true;\n  /** @type {'default'|'outside'} */\n  export let closeButton = \"default\";\n  /** @type {boolean} */\n  export let verticallyCentered = true;\n  /** @type {HTMLDivElement} */\n  export let ref = undefined;\n  /** @type {boolean} */\n  export let show = false;\n  /** @type {boolean} @readonly */\n  export let shown = false;\n  /** @type {boolean} */\n  export let stack = true;\n\n  let externalAssignment = true;\n  $: if (ref) {\n    if (externalAssignment) {\n      if (show && !ref.classList.contains('uk-open')) {\n        UIkit.modal(ref).show();\n      } else if (!show && ref.classList.contains('uk-open')) {\n        UIkit.modal(ref).hide();\n        if (document.querySelectorAll('.uk-modal.uk-open').length <= 1) {\n          document.documentElement.classList.remove('uk-modal-page');\n        }\n      }\n    }\n    externalAssignment = true;\n  }\n\n  onDestroy(() => {\n    if (show) {\n      dispatchCustomEvent(ref, 'hide');\n    }\n    if (shown) {\n      dispatchCustomEvent(ref, 'hidden');\n    }\n  });\n\n  function handleShow() {\n    externalAssignment = false;\n    show = true;\n  }\n\n  function handleHide() {\n    externalAssignment = false;\n    show = false;\n  }\n  \n  let previouslyFocusedRef;\n  function handleShown() {\n    shown = true;\n    previouslyFocusedRef = document.activeElement;\n    ref && ref.focus();\n  }\n\n  async function handleHidden() {\n    shown = false;\n    await tick();\n    previouslyFocusedRef && previouslyFocusedRef.focus();\n  }\n\n  let noHeader;\n  let noFooter;\n</script>\n\n<style>\n  .fullscreen-dialog {\n    display: flex;\n    flex-flow: column;\n    height: 100vh;\n  }\n  .fullscreen-footer {\n    margin-top: auto;\n  }</style>\n\n<div\n  tabindex=\"0\"\n  on:show={handleShow}\n  on:hide={handleHide}\n  on:shown={handleShown}\n  on:hidden={handleHidden}\n  on:show|stopPropagation\n  on:hide|stopPropagation\n  on:shown|stopPropagation\n  on:hidden|stopPropagation\n  on:beforeshow|stopPropagation\n  on:beforehide|stopPropagation\n  bind:this={ref}\n  class:uk-modal-full={fullScreen}\n  class={className}\n  {style}\n  {id}\n  uk-modal={`esc-close: ${closeable}; bg-close: ${closeable}; stack: ${stack}`}\n  class:uk-flex-top={verticallyCentered}>\n  <div\n    class=\"uk-modal-dialog\"\n    class:fullscreen-dialog={fullScreen}\n    class:uk-modal-container={expand}\n    class:uk-margin-auto-vertical={verticallyCentered}>\n    {#if closeable && closeButton}\n      <button\n        class:uk-modal-close-default={closeButton === 'default'}\n        class:uk-modal-close-outside={closeButton === 'outside'}\n        class:uk-modal-close-full={fullScreen}\n        type=\"button\"\n        uk-close />\n    {/if}\n    {#if title}\n      <div class=\"uk-modal-header\">\n        <h2 class=\"uk-modal-title\">{title}</h2>\n      </div>\n    {:else}\n      <div class=\"uk-modal-header\" style={noHeader ? 'display: none' : ''}>\n        <slot name=\"header\">\n          <div bind:this={noHeader} />\n        </slot>\n      </div>\n    {/if}\n    {#if !fullScreen}\n      <div class=\"uk-modal-body\" uk-overflow-auto>\n        <slot />\n      </div>\n    {:else}\n      <div class=\"uk-modal-body\">\n        <slot />\n      </div>\n    {/if}\n    <div class=\"uk-modal-footer\" style={noFooter ? 'display: none' : ''} class:fullscreen-footer={fullScreen}>\n      <slot name=\"footer\">\n        <div bind:this={noFooter} />\n      </slot>\n    </div>\n  </div>\n</div>\n",
    "<script>\n\timport { createEventDispatcher, tick } from \"svelte\";\n\n\timport { cubicInOut } from \"svelte/easing\";\n\n\t/** @type {Array<{text: string|undefined, html: string|undefined, props: Record<string, any>|undefined, component: SvelteComponent|undefined}>} */\n\texport let items = [];\n\t/** @type {SvelteComponent|undefined} */\n\texport let component = undefined;\n\t/** @type {HTMLUListElement} @readonly */\n\texport let ref = undefined;\n\t/** @type {number} */\n\texport let animationDuration = 200;\n\t/**\n\t * Whether to show or hide the move-to-top and move-to-bottom buttons\n\t * @type {boolean} */\n\texport let moveToBoundaries = false;\n\t/** \n\t * @default undefined\n\t * @description A string specifying custom style properties for the component\n\t * @type {string|undefined} */\n\texport let style = undefined;\n\t/** \n\t * @default undefined\n\t * @description A string containing any additional classes to apply to the component\n\t * @type {string|undefined} */\n\texport let className = undefined;\n\n\tconst dispatch = createEventDispatcher();\n\n\tlet foregroundElement = null;\n\tlet focusOnMoved = null;\n\tlet lastEventDetails = null;\n\tfunction move(prevIndex, newIndex) {\n\t\tforegroundElement = ref.children[prevIndex];\n\t\tfocusOnMoved = document.activeElement;\n\t\tconst subject = items.splice(prevIndex, 1)[0];\n\t\titems.splice(newIndex, 0, subject);\n\t\titems = [...items];\n\n\t\tlastEventDetails = {\n\t\t\told: prevIndex,\n\t\t\tnew: newIndex,\n\t\t};\n\t\tdispatch(\"move\", lastEventDetails);\n\t}\n\n\tfunction moveUp(index) {\n\t\tmove(index, index - 1);\n\t}\n\tfunction moveDown(index) {\n\t\tmove(index, index + 1);\n\t}\n\n\tfunction moveTop(index) {\n\t\tmove(index, 0);\n\t}\n\n\tfunction moveBottom(index) {\n\t\tmove(index, items.length - 1);\n\t}\n\n\tfunction animation(node, { from, to }) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst isForeground = node === foregroundElement;\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: animationDuration,\n\t\t\teasing: cubicInOut,\n\t\t\tcss: (t, u) => {\n\t\t\t\tconst ratio =\n\t\t\t\t\t1 +\n\t\t\t\t\t(isForeground\n\t\t\t\t\t\t? (0.5 - Math.abs(t - 0.5)) / 25\n\t\t\t\t\t\t: -(0.5 - Math.abs(u - 0.5)) / 25);\n\t\t\t\treturn `\n\t\t\t\t\tposition: relative;\n\t\t\t\t\ttransform: translate(${u * dx}px, ${u * dy}px) scale(${ratio});\n\t\t\t\t\tz-index: ${isForeground ? \"1\" : \"0\"};\n\t\t\t\t`;\n\t\t\t},\n\t\t\ttick: (t) => {\n\t\t\t\tif (t === 1 && isForeground) {\n\t\t\t\t\tdispatch(\"moved\", lastEventDetails);\n\t\t\t\t\ttick().then(() => {\n\t\t\t\t\t\tfocusOnMoved && focusOnMoved.focus();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n</script>\n\n<style>\n\t.cursor-pointer {\n\t\tcursor: pointer;\n\t}</style>\n\n<ul class:uk-list={true} bind:this={ref} class={className} {style}>\n\t{#each items as item, index (item)}\n\t\t<li\n\t\t\tanimate:animation\n\t\t\tclass=\"uk-box-shadow-medium uk-padding-small uk-background-default\t\">\n\t\t\t<div class=\"uk-flex\">\n\t\t\t\t<div\n\t\t\t\t\tclass=\"uk-flex uk-flex-column uk-flex-center uk-margin-small-right\">\n\t\t\t\t\t{#if moveToBoundaries}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tuk-icon=\"icon: chevron-double-up; ratio: 1.2\"\n\t\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t\tclass:cursor-pointer={index > 0}\n\t\t\t\t\t\t\tdisabled={index === 0}\n\t\t\t\t\t\t\ton:click={() => index > 0 && moveTop(index)}\n\t\t\t\t\t\t\ton:keyup={(e) => ['Enter'].includes(e.code) && index > 0 && moveTop(index)} />\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t<span\n\t\t\t\t\t\tuk-icon=\"icon: chevron-up; ratio: 1.2\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\tclass:cursor-pointer={index > 0}\n\t\t\t\t\t\tdisabled={index === 0}\n\t\t\t\t\t\ton:click={() => index > 0 && moveUp(index)}\n\t\t\t\t\t\ton:keyup={(e) => ['Enter'].includes(e.code) && index > 0 && moveUp(index)} />\n\n\t\t\t\t\t<span\n\t\t\t\t\t\tuk-icon=\"icon: chevron-down; ratio: 1.2\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\tclass:cursor-pointer={index < items.length - 1}\n\t\t\t\t\t\tdisabled={index >= items.length - 1}\n\t\t\t\t\t\ton:click={() => index < items.length - 1 && moveDown(index)}\n\t\t\t\t\t\ton:keyup={(e) => ['Enter'].includes(e.code) && index < items.length - 1 && moveDown(index)} />\n\t\t\t\t\t{#if moveToBoundaries}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tuk-icon=\"icon: chevron-double-down; ratio: 1.2\"\n\t\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\t\tclass:cursor-pointer={index < items.length - 1}\n\t\t\t\t\t\t\tdisabled={index >= items.length - 1}\n\t\t\t\t\t\t\ton:click={() => index < items.length - 1 && moveBottom(index)}\n\t\t\t\t\t\t\ton:keyup={(e) => ['Enter'].includes(e.code) && index < items.length - 1 && moveBottom(index)} />\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t<div class=\"uk-margin-small-right\">\n\t\t\t\t\t<hr class=\"uk-divider-vertical uk-height-1-1\" />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"uk-width-expand\">\n\t\t\t\t\t{#if !component && !item.component}\n\t\t\t\t\t\t{#if item.html}\n\t\t\t\t\t\t\t{@html item.html}\n\t\t\t\t\t\t{:else if item.text}{item.text}{/if}\n\t\t\t\t\t{:else if item.text}\n\t\t\t\t\t\t<svelte:component\n\t\t\t\t\t\t\tthis={item.component || component}\n\t\t\t\t\t\t\t{...item.props || {}}>\n\t\t\t\t\t\t\t{item.text}\n\t\t\t\t\t\t</svelte:component>\n\t\t\t\t\t{:else if item.html}\n\t\t\t\t\t\t<svelte:component\n\t\t\t\t\t\t\tthis={item.component || component}\n\t\t\t\t\t\t\t{...item.props || {}}>\n\t\t\t\t\t\t\t{@html item.html}\n\t\t\t\t\t\t</svelte:component>\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t<svelte:component\n\t\t\t\t\t\t\tthis={item.component || component}\n\t\t\t\t\t\t\t{...item.props || {}} />\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</li>\n\t{/each}\n</ul>\n",
    "<script>\n  /** @type {Array<string|{label: string, className: string|undefined, textAlign: 'center'|'right'|'left'|undefined}>} */\n  export let heading = [];\n  /** @type {'small'|undefined} */\n  export let size = undefined;\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {string|undefined} */\n  export let style = undefined;\n  /** @type {'divider'|'striped'|undefined} */\n  export let appearance = undefined;\n  /** @type {boolean} */\n  export let stickyHeader = false;\n  /** @type {HTMLTableElement} */\n  export let ref = undefined;\n  /** @type {string|undefined} */\n  export let caption = undefined;\n</script>\n\n<style>\n  th {\n    white-space: nowrap;\n  }\n  th.sticky {\n    top: 0;\n    position: sticky;\n    background-color: #fff;\n  }</style>\n\n<table\n  bind:this={ref}\n  class:uk-table={true}\n  class:uk-table-middle={true}\n  class:uk-table-striped={appearance === 'striped'}\n  class:uk-table-divider={appearance === 'divider'}\n  class:uk-table-small={size === 'small'}\n  class={className}\n  {style}>\n  {#if caption}\n    <caption>{caption}</caption>\n  {/if}\n  {#if heading && heading.length > 0}\n    <thead>\n      <tr>\n        {#each heading as col (col)}\n          <th\n            class={typeof col === 'object' ? col.className : undefined}\n            style=\"text-align: {typeof col === 'object' ? (col.textAlign || 'left') : 'left'}\"\n            class:sticky={stickyHeader}\n          >{typeof col === 'object' ? col.label : col}</th>\n        {/each}\n      </tr>\n    </thead>\n  {/if}\n  <tbody>\n    <slot />\n  </tbody>\n</table>\n",
    "<script>\n\timport { debounce } from \"debounce\";\n\timport { generateId } from \"../../services/html\";\n\timport { sleep } from \"../../helpers/time\";\n\timport { tick, createEventDispatcher, onMount } from \"svelte\";\n\timport { fly } from \"svelte/transition\";\n\timport { dispatchCustomEvent } from \"../../helpers/events\";\n\timport Loader from \"../Loader.svelte\";\n\timport {\n\t\tglobalOptionalMarker,\n\t\tglobalRequiredMarker,\n\t} from \"../../stores/markers\";\n\n\t/** @type {string} */\n\texport let id = generateId();\n\t/**\n\t * Whether or not the autocomplete supports multiple values selected at the same time\n\t * @type {boolean}\n\t * @default false */\n\texport let multi = false;\n\t/**\n\t * If not in multi-mode (default): the current selected value or null if no value is selected\n\t * Else: the list of currently selected values\n\t * @type {any|null|any[]} */\n\texport let value = !multi ? null : [];\n\t/**\n\t * Label of this component\n\t * @type {string} */\n\texport let label = \"\";\n\t/**\n\t * @description A string containing any additional classes to apply to the component\n\t * @type {string|undefined} */\n\texport let className = undefined;\n\t/**\n\t * @description A string specifying custom style properties for the component\n\t * @type {string|undefined} */\n\texport let style = undefined;\n\t/**\n\t * @description Text to show when the applied filter doesn't return any result\n\t * @type {string} */\n\texport let textIfNoResult = \"\";\n\t/**\n\t * @description Text to show when the field is required but no value has been chosen\n\t * @type {string} */\n\texport let textIfInvalid = \"\";\n\t/**\n\t * @description Control whether the component is disabled or not\n\t * @type {boolean} */\n\texport let disabled = false;\n\t/**\n\t * @description UIkit tooltip\n\t * @type {string|undefined} */\n\texport let tooltip = undefined;\n\t/**\n\t * @description Input placeholder\n\t * @type {string|undefined} */\n\texport let placeholder = undefined;\n\t/** @type {boolean} */\n\texport let optional = false;\n\t/**\n\t * @description Reference to the div that wraps this component\n\t * @type {HTMLDivElement} */\n\texport let ref = undefined;\n\t/**\n\t * @description Autocapitalize setting of the input tag\n\t * @type {string|undefined} */\n\texport let autocapitalize = undefined;\n\t/**\n\t * @description Autocomplete setting of the input tag\n\t * @type {string|undefined} */\n\texport let autocomplete = \"off\";\n\t/**\n\t * @description Autocorrect setting of the input tag\n\t * @type {string|undefined} */\n\texport let autocorrect = undefined;\n\t/** @type {string|undefined} */\n\texport let spellcheck = undefined;\n\t/**\n\t * @description In/Out fly animation duration (in milliseconds)\n\t * @type {number} */\n\texport let animationDuration = 100;\n\t/** @type {'initial'|'valid'|'invalid'} */\n\texport let state = \"initial\";\n\t/**\n\t * The current search string\n\t * @type {string} */\n\texport let query = \"\";\n\t/**\n\t * Currently selected options\n\t * @type {Array<{label: string, value: any}>} */\n\texport let selectedOptions = [];\n\t/** @type {AsyncAutocompleteDataProvider} */\n\texport let dataProvider;\n\t/** @type {CallableFunction} */\n\texport let dataProviderErrorHandler = (err) => console.error(err);\n\t/** @type {boolean} @readonly */\n\texport let loading = false;\n\t/** @type {number} */\n\texport let debounceMs = 200;\n\n\t/** @type {string|undefined} */\n\texport let requiredMarker = undefined;\n\t/** @type {string|undefined} */\n\texport let optionalMarker = undefined;\n\n\tlet suffix = \"\";\n\tfunction updateLabelSuffix() {\n\t\tif (optional) {\n\t\t\tsuffix =\n\t\t\t\ttypeof optionalMarker === \"string\"\n\t\t\t\t\t? optionalMarker\n\t\t\t\t\t: $globalOptionalMarker;\n\t\t} else {\n\t\t\tsuffix =\n\t\t\t\ttypeof requiredMarker === \"string\"\n\t\t\t\t\t? requiredMarker\n\t\t\t\t\t: $globalRequiredMarker;\n\t\t}\n\t}\n\n\t$: optional,\n\t\trequiredMarker,\n\t\toptionalMarker,\n\t\t$globalRequiredMarker,\n\t\t$globalOptionalMarker,\n\t\tupdateLabelSuffix();\n\n\tlet searchRef;\n\n\t/**\n\t * Autocomplete options, the value must be unique\n\t * @type {Array<{label: string, value: any}>} */\n\tlet options = [];\n\tlet lastQuery = null;\n\tlet forceUpdate = false;\n\tasync function _reload() {\n\t\tif (!loading && (forceUpdate || query !== lastQuery)) {\n\t\t\tloading = true;\n\t\t\ttry {\n\t\t\t\tlet providerQuery;\n\t\t\t\tlet data;\n\n\t\t\t\tlet debounce = false;\n\n\t\t\t\tfunction updateProviderArgs() {\n\t\t\t\t\tproviderQuery = query;\n\t\t\t\t}\n\n\t\t\t\tfunction providerArgsChanged() {\n\t\t\t\t\treturn providerQuery !== query || forceUpdate;\n\t\t\t\t}\n\n\t\t\t\tdo {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tforceUpdate = false;\n\t\t\t\t\t\tupdateProviderArgs();\n\t\t\t\t\t\tif (debounce && debounceMs > 0) {\n\t\t\t\t\t\t\tawait sleep(debounceMs);\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (providerArgsChanged());\n\n\t\t\t\t\tdata = await dataProvider(query);\n\n\t\t\t\t\tdebounce = true;\n\t\t\t\t} while (providerArgsChanged());\n\n\t\t\t\toptions = data;\n\n\t\t\t\tlastQuery = query;\n\t\t\t} catch (err) {\n\t\t\t\tdataProviderErrorHandler(err);\n\t\t\t} finally {\n\t\t\t\tloading = false;\n\t\t\t}\n\t\t}\n\t}\n\n\texport function reload() {\n\t\tforceUpdate = true;\n\t\treturn _reload();\n\t}\n\n\tconst debouncedReload =\n\t\tdebounceMs > 0 ? debounce(_reload, debounceMs) : _reload;\n\n\tlet showSuggested = false;\n\tlet innerClick = false;\n\tconst dispatch = createEventDispatcher();\n\n\tfunction showSuggestedOptions(e) {\n\t\tshowSuggested = true;\n\t\thideOnBlur = true;\n\t}\n\n\tfunction hideSuggested() {\n\t\tif (!innerClick) {\n\t\t\tshowSuggested = false;\n\t\t}\n\t\tinnerClick = false;\n\t}\n\n\tfunction updateValidity() {\n\t\tif (searchRef) {\n\t\t\tif (\n\t\t\t\t!optional &&\n\t\t\t\t((multi && value.length === 0) ||\n\t\t\t\t\t(!multi && (value === null || value === undefined)))\n\t\t\t) {\n\t\t\t\tsearchRef.setCustomValidity(textIfInvalid || \"Field is required\");\n\t\t\t} else {\n\t\t\t\tsearchRef.setCustomValidity(\"\");\n\t\t\t}\n\t\t}\n\t}\n\n\t$: {\n\t\toutlineOptionIndex = 0;\n\t\tupdateValidity();\n\t}\n\n\tlet hideOnBlur = true;\n\tlet everFocused = false;\n\tfunction handleBlur() {\n\t\tif (\n\t\t\teverFocused &&\n\t\t\toptions.length === 0 &&\n\t\t\t((multi && value.length > 0) ||\n\t\t\t\t(!multi && value !== null && value !== undefined))\n\t\t) {\n\t\t\tvalue = multi ? [] : null;\n\t\t\tdispatchCustomEvent(searchRef, \"change\", value);\n\t\t\tdispatch(\"change\", value);\n\t\t}\n\t\tupdateValidity();\n\t\tif (everFocused) {\n\t\t\tstate = searchRef.checkValidity() ? \"valid\" : \"invalid\";\n\t\t}\n\t\tif (hideOnBlur) {\n\t\t\tshowSuggested = false;\n\t\t}\n\t\thideOnBlur = true;\n\t}\n\n\tonMount(() => {\n\t\thandleBlur();\n\t});\n\n\tfunction toggleOption(option, checked) {\n\t\tif (checked) {\n\t\t\tif (multi) {\n\t\t\t\tif (query !== \"\") {\n\t\t\t\t\tquery = \"\";\n\t\t\t\t}\n\t\t\t\tif (!value.includes(option.value)) {\n\t\t\t\t\tvalue = [...value, option.value];\n\t\t\t\t\tselectedOptions = [...selectedOptions, option];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (query !== option.label) {\n\t\t\t\t\tquery = option.label;\n\t\t\t\t}\n\t\t\t\tif (value !== option.value) {\n\t\t\t\t\tvalue = option.value;\n\t\t\t\t}\n\t\t\t\tselectedOptions = [option];\n\t\t\t}\n\t\t\tinnerClick = false;\n\t\t\thideSuggested();\n\t\t} else {\n\t\t\tif (multi) {\n\t\t\t\tif (value.includes(option.value)) {\n\t\t\t\t\tconst optionIndex = selectedOptions.indexOf(option);\n\t\t\t\t\tif (optionIndex !== -1) {\n\t\t\t\t\t\tselectedOptions.splice(optionIndex, 1);\n\t\t\t\t\t\tselectedOptions = [...selectedOptions];\n\t\t\t\t\t}\n\t\t\t\t\tconst valueIndex = value.indexOf(option.value);\n\t\t\t\t\tif (valueIndex !== -1) {\n\t\t\t\t\t\tvalue.splice(valueIndex, 1);\n\t\t\t\t\t\tvalue = [...value];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tselectedOptions = [];\n\t\t\t}\n\t\t}\n\t\thandleBlur();\n\t\tdispatchCustomEvent(searchRef, \"change\", value);\n\t\tdispatch(\"change\", value);\n\t}\n\n\tfunction handleChangeGenerator(option) {\n\t\treturn function () {\n\t\t\ttoggleOption(option, this.checked);\n\t\t};\n\t}\n\n\tlet outlineOptionIndex = 0;\n\n\t$: if (suggestedRef) {\n\t\tif (options.length === 0) {\n\t\t\tsuggestedRef.scrollTop = 0;\n\t\t} else {\n\t\t\tsuggestedRef.scrollTop = Math.max(\n\t\t\t\t0,\n\t\t\t\t(suggestedRef.scrollHeight / options.length) * (outlineOptionIndex - 3)\n\t\t\t);\n\t\t}\n\t}\n\n\t$: if (options) {\n\t\toutlineOptionIndex = Math.min(\n\t\t\toptions.length - 1,\n\t\t\tMath.max(0, outlineOptionIndex)\n\t\t);\n\t}\n\n\tlet optionsRenderedRef;\n\t$: optionsRendered = Boolean(optionsRenderedRef);\n\t$: if (optionsRendered) {\n\t\tupdateSuggestedMaxHeight();\n\t}\n\tfunction updateSuggestedMaxHeight() {\n\t\tif (suggestedRef && suggestedRef.querySelector(\"label\")) {\n\t\t\tsuggestedRef.style.maxHeight =\n\t\t\t\tsuggestedRef.querySelector(\"label\").offsetHeight * 5 + \"px\";\n\t\t}\n\t}\n\n\tfunction handleInput() {\n\t\tif (query !== this.value) {\n\t\t\tquery = this.value;\n\t\t\tdispatch(\"query\", query);\n\t\t\tshowSuggested = true;\n\t\t}\n\t}\n\n\tlet suggestedRef = null;\n\t/** @param {KeyboardEvent} e */\n\tfunction handleKeydown(e) {\n\t\tif (e.key === \"Escape\") {\n\t\t\tshowSuggested = false;\n\t\t} else if (\n\t\t\tsuggestedRef &&\n\t\t\toptions.length > 0 &&\n\t\t\t[\"ArrowUp\", \"ArrowDown\", \"Enter\"].includes(e.key)\n\t\t) {\n\t\t\te.preventDefault();\n\t\t\tswitch (e.key) {\n\t\t\t\tcase \"ArrowUp\":\n\t\t\t\t\tif (outlineOptionIndex === 0) {\n\t\t\t\t\t\toutlineOptionIndex = options.length - 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutlineOptionIndex--;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ArrowDown\":\n\t\t\t\t\tif (outlineOptionIndex === options.length - 1) {\n\t\t\t\t\t\toutlineOptionIndex = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutlineOptionIndex++;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Enter\":\n\t\t\t\t\tconst input =\n\t\t\t\t\t\tsuggestedRef.querySelectorAll(\"input\")[outlineOptionIndex];\n\t\t\t\t\tinput.checked = true;\n\t\t\t\t\tdispatchCustomEvent(input, \"change\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (e.key === \"Enter\" && options.length === 0) {\n\t\t\thideOnBlur = false;\n\t\t\thandleBlur();\n\t\t}\n\t}\n\tfunction resetQueryAndValue() {\n\t\tif (multi) {\n\t\t\tvalue = [];\n\t\t} else {\n\t\t\tvalue = null;\n\t\t}\n\t\tselectedOptions = [];\n\t\tquery = \"\";\n\t}\n\tlet lastMultiValue = multi;\n\tfunction handleMultiChange() {\n\t\tif (multi === lastMultiValue) {\n\t\t\treturn;\n\t\t}\n\t\tlastMultiValue = multi;\n\t\tresetQueryAndValue();\n\t}\n\t$: multi, handleMultiChange();\n\n\tlet filteredOptions = [];\n\tfunction updateFilteredOptions() {\n\t\tfilteredOptions = options.filter((o) => !multi || !value.includes(o.value));\n\t}\n\t$: multi, options, updateFilteredOptions();\n\n\tfunction scheduleDataProviderCall() {\n\t\tif (debouncedReload.clear) {\n\t\t\tdebouncedReload.clear();\n\t\t}\n\t\tdebouncedReload();\n\t}\n\t$: query, scheduleDataProviderCall();\n</script>\n\n<svelte:body\n\ton:click={hideSuggested}\n\ton:touchstart={() => (hideOnBlur = false)}\n\ton:mousedown={() => (hideOnBlur = false)} />\n<div\n\tclass:custom-uk-autocomplete-wrapper={true}\n\tbind:this={ref}\n\t{style}\n\tclass:text-wrapper={true}\n\tclass={className}\n\tclass:uk-margin-bottom={true}\n\ton:click={() => (innerClick = true)}\n>\n\t{#if label}\n\t\t<label for={id} class=\"uk-form-label\">{label} {suffix}</label>\n\t{/if}\n\t{#if multi && selectedOptions.length > 0}\n\t\t<div class=\"uk-margin-small-bottom\">\n\t\t\t{#each selectedOptions as option (option)}\n\t\t\t\t<span class=\"uk-badge uk-margin-small-right\"\n\t\t\t\t\t>{option.label}\n\t\t\t\t\t<!-- svelte-ignore a11y-missing-attribute -->\n\t\t\t\t\t<a\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t\t\tuk-icon=\"icon: close\"\n\t\t\t\t\t\ton:keydown={(e) => {\n\t\t\t\t\t\t\tif ([\"Enter\"].includes(e.code)) {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\ttoggleOption(option, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ton:click={() => {\n\t\t\t\t\t\t\ttoggleOption(option, false);\n\t\t\t\t\t\t}}>&ZeroWidthSpace;</a\n\t\t\t\t\t>\n\t\t\t\t</span>\n\t\t\t{/each}\n\t\t</div>\n\t{/if}\n\t<div style=\"position: relative\">\n\t\t<input\n\t\t\tclass:custom-uk-autocomplete-input={true}\n\t\t\tbind:this={searchRef}\n\t\t\t{autocapitalize}\n\t\t\t{autocomplete}\n\t\t\t{autocorrect}\n\t\t\t{spellcheck}\n\t\t\t{placeholder}\n\t\t\tclass=\"uk-input\"\n\t\t\tclass:uk-form-danger={state === \"invalid\"}\n\t\t\tclass:uk-form-success={state === \"valid\"}\n\t\t\ttype=\"search\"\n\t\t\tuk-tooltip={tooltip}\n\t\t\t{id}\n\t\t\tvalue={query}\n\t\t\ton:input={handleInput}\n\t\t\ton:keydown={handleKeydown}\n\t\t\trequired={false}\n\t\t\t{disabled}\n\t\t\ton:focus={showSuggestedOptions}\n\t\t\ton:click={showSuggestedOptions}\n\t\t\ton:blur={handleBlur}\n\t\t\ton:focus={() => ((everFocused = true), (state = \"initial\"))}\n\t\t/>\n\t\t{#if loading && showSuggested}\n\t\t\t<Loader className=\"uk-form-icon uk-form-icon-flip\" ratio={0.4} />\n\t\t{:else if ((multi && value.length > 0) || (!multi && value !== null && value !== undefined)) && !disabled}\n\t\t\t<!-- svelte-ignore a11y-missing-attribute -->\n\t\t\t<a\n\t\t\t\trole=\"button\"\n\t\t\t\ttabindex=\"0\"\n\t\t\t\tclass=\"uk-form-icon uk-form-icon-flip\"\n\t\t\t\tuk-icon=\"icon: close\"\n\t\t\t\ton:keydown={(e) => {\n\t\t\t\t\tif ([\"Enter\"].includes(e.code)) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tresetQueryAndValue();\n\t\t\t\t\t\thandleBlur();\n\t\t\t\t\t\tdispatchCustomEvent(searchRef, \"change\", value);\n\t\t\t\t\t\tdispatch(\"change\", value);\n\t\t\t\t\t\tsearchRef.focus();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\ton:click={() => {\n\t\t\t\t\tresetQueryAndValue();\n\t\t\t\t\thandleBlur();\n\t\t\t\t\tdispatchCustomEvent(searchRef, \"change\", value);\n\t\t\t\t\tdispatch(\"change\", value);\n\t\t\t\t}}>&ZeroWidthSpace;</a\n\t\t\t>\n\t\t{/if}\n\t</div>\n\t{#if showSuggested && !disabled}\n\t\t<div\n\t\t\tclass:custom-uk-autocomplete-suggested={true}\n\t\t\tin:fly={{ y: 50, duration: animationDuration }}\n\t\t\tclass=\"uk-grid-small uk-box-shadow-small suggested uk-background-default\n        uk-margin-remove-top uk-margin-remove-left uk-grid\"\n\t\t\tbind:this={suggestedRef}\n\t\t>\n\t\t\t{#if filteredOptions.length > 0}\n\t\t\t\t<div bind:this={optionsRenderedRef} style=\"display:none\" />\n\t\t\t\t{#each filteredOptions as option, i (option)}\n\t\t\t\t\t<label\n\t\t\t\t\t\tin:fly={{ y: -10, duration: animationDuration }}\n\t\t\t\t\t\tclass=\"uk-width-1-1\"\n\t\t\t\t\t\tclass:uk-background-muted={i === outlineOptionIndex}\n\t\t\t\t\t\tclass:outline={i === outlineOptionIndex}\n\t\t\t\t\t\tclass:uk-background-default={i !== outlineOptionIndex}\n\t\t\t\t\t\tclass:no-outline={i !== outlineOptionIndex}\n\t\t\t\t\t>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass=\"uk-radio interactive-hidden\"\n\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\tname={id + \"-radio\"}\n\t\t\t\t\t\t\tchecked={option.value === value}\n\t\t\t\t\t\t\ton:change|stopPropagation={handleChangeGenerator(option)}\n\t\t\t\t\t\t\ton:click|stopPropagation={handleChangeGenerator(option)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{#if !multi && option.value === value}\n\t\t\t\t\t\t\t<span class=\"uk-icon\" uk-icon=\"icon: check; ratio: .75\" />\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{option.label}\n\t\t\t\t\t</label>\n\t\t\t\t{/each}\n\t\t\t{:else if textIfNoResult}\n\t\t\t\t<div\n\t\t\t\t\tclass=\"uk-text-center uk-text-italic uk-width-1-1\"\n\t\t\t\t\tstyle=\"padding-top: .5em; padding-bottom: .5em; cursor: default\"\n\t\t\t\t>\n\t\t\t\t\t{textIfNoResult}\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t</div>\n\t{/if}\n</div>\n\n<style lang=\"scss\">.text-wrapper {\n  position: relative;\n}\n.text-wrapper .suggested {\n  z-index: 10;\n  position: absolute;\n  width: 100%;\n  cursor: pointer;\n  font-size: 0.9em;\n  overflow-y: auto;\n}\n.text-wrapper .suggested label {\n  padding: 10px;\n  cursor: pointer;\n}\n.text-wrapper .suggested label:hover {\n  border: 1px solid currentColor;\n}\n\n.interactive-hidden {\n  position: absolute;\n  opacity: 0;\n  pointer-events: none;\n  display: none;\n}\n\n.outline {\n  border: 1px solid currentColor;\n}\n\n.no-outline {\n  border: 1px solid transparent;\n}</style>\n",
    "<script>\n  import { globalOptionalMarker, globalRequiredMarker } from '../../stores/markers';\n\n  export let inputId;\n  export let hasIcon = false;\n  export let label = \"\";\n  /** \n\t * @description A string specifying custom style properties for the component\n\t * @type {string|undefined} */\n\texport let style = undefined;\n  export let className = undefined;\n  export let textIfInvalid = undefined;\n  export let textIfValid = undefined;\n  export let helperText = undefined;\n  export let optional = false;\n  /** @type {'initial'|'valid'|'invalid'} */\n  export let state = \"initial\";\n  export let labelWrap = false;\n  export let ref = undefined;\n\n  /** @type {string|undefined} */\n  export let requiredMarker = undefined;\n  /** @type {string|undefined} */\n  export let optionalMarker = undefined;\n\n  let suffix = '';\n  function updateLabelSuffix() {\n    if (optional) {\n      suffix = typeof optionalMarker === 'string'\n        ? optionalMarker\n        : $globalOptionalMarker;\n    } else {\n      suffix = typeof requiredMarker === 'string'\n        ? requiredMarker\n        : $globalRequiredMarker\n    }\n  }\n\n  $: optional, requiredMarker, optionalMarker, $globalRequiredMarker, $globalOptionalMarker, updateLabelSuffix();\n</script>\n\n<style lang=\"scss\">.helper-text,\n.valid-text,\n.invalid-text {\n  font-size: 0.95em;\n}\n\n.relative {\n  position: relative;\n}</style>\n\n<div {style} class={className} class:uk-margin-bottom={true} bind:this={ref}>\n  {#if labelWrap}\n    <div\n      class:relative={hasIcon}\n      class=\"uk-form-controls uk-form-controls-text\">\n      <label for={inputId} class=\"uk-form-label\">\n        <slot />\n        {label}\n        {suffix}\n      </label>\n    </div>\n  {:else}\n    {#if label}\n      <label class=\"uk-form-label\" for={inputId}>\n        {label}\n        {suffix}\n      </label>\n    {/if}\n    <div class:relative={hasIcon} class=\"uk-form-controls\">\n      <slot />\n    </div>\n  {/if}\n  {#if helperText || textIfInvalid || textIfValid}\n    {#if state === 'initial'}\n      <div class=\"helper-text\">{helperText || '\\xA0'}</div>\n    {:else if state === 'valid'}\n      <div class=\"valid-text\">{textIfValid || '\\xA0'}</div>\n    {:else if state === 'invalid'}\n      <div class=\"invalid-text\">{textIfInvalid || '\\xA0'}</div>\n    {/if}\n  {/if}\n</div>\n",
    "<script>\n  import { generateId } from \"../../services/html\";\n  import Field from \"./Field.svelte\";\n\n  /** @type {string} */\n  export let id = generateId();\n  /** @type {string} */\n  export let label = \"\";\n  /** \n\t * @description A string specifying custom style properties for the component\n\t * @type {string|undefined} */\n  export let style = undefined;\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {string|undefined} */\n  export let name = undefined;\n  /** @type {string|undefined} */\n  export let textIfInvalid = undefined;\n  /** @type {string|undefined} */\n  export let textIfValid = undefined;\n  /** @type {string|undefined} */\n  export let helperText = undefined;\n  /** @type {string} */\n  export let placeholder = \"\";\n  /** @type {boolean} */\n  export let optional = false;\n  /** @type {string} */\n  export let value;\n  /** @type {HTMLInputElement} */\n  export let ref = undefined;\n  /** @type {number|string} */\n  export let min = undefined;\n  /** @type {number|string} */\n  export let max = undefined;\n  /** @type {number|string} */\n  export let step = undefined;\n  /** @type {boolean} */\n  export let disabled = false;\n  /** @type {string|undefined} */\n  export let tooltip = undefined;\n  /** @type {string|undefined} */\n  export let icon = undefined;\n  /** @type {'left'|'right'} */\n  export let iconPosition = \"left\";\n  /** @type {string|undefined} */\n  export let autocapitalize = undefined;\n  /** @type {string|undefined} */\n  export let autocomplete = undefined;\n  /** @type {string|undefined} */\n  export let autocorrect = undefined;\n  /** @type {string|undefined} */\n  export let spellcheck = undefined;\n\n  /** @type {string|undefined} */\n  export let requiredMarker = undefined;\n  /** @type {string|undefined} */\n  export let optionalMarker = undefined;\n\n  /** @type {'initial'|'valid'|'invalid'} */\n  export let state = \"initial\";\n</script>\n\n<style>\n  .uk-form-icon.right {\n    right: 0;\n    left: auto;\n  }\n\n  .paddingRight {\n    padding-right: 4ch !important;\n  }</style>\n\n<Field\n  hasIcon={!!icon}\n  inputId={id}\n  {requiredMarker}\n  {optionalMarker}\n  {label}\n  {state}\n  {className}\n  {style}\n  {textIfInvalid}\n  {textIfValid}\n  {helperText}\n  {optional}>\n  {#if iconPosition === 'left'}\n    {#if icon}<span class=\"uk-form-icon\" uk-icon=\"icon: {icon}\" />{/if}\n  {/if}\n  <input\n    {autocapitalize}\n    {autocomplete}\n    {autocorrect}\n    {spellcheck}\n    {id}\n    {name}\n    {min}\n    {max}\n    {step}\n    {disabled}\n    uk-tooltip={tooltip}\n    bind:this={ref}\n    required={!optional}\n    {placeholder}\n    type=\"number\"\n    class:paddingRight={iconPosition === 'right'}\n    bind:value\n    on:input\n    on:change\n    class=\"uk-input\"\n    class:uk-form-danger={state === 'invalid'}\n    class:uk-form-success={state === 'valid'}\n    on:blur={() => (state = ref.checkValidity() ? 'valid' : 'invalid')}\n    on:focus={() => ((state = 'initial'), ref.select())} />\n  {#if iconPosition === 'right'}\n    {#if icon}<span class=\"uk-form-icon right\" uk-icon=\"icon: {icon}\" />{/if}\n  {/if}\n</Field>\n",
    "<script>\n  import { generateId } from \"../../services/html\";\n  import Field from \"./Field.svelte\";\n\n  /** @type {string} */\n  export let id = generateId();\n  /** @type {string} */\n  export let label = \"\";\n  /** \n\t * @description A string specifying custom style properties for the component\n\t * @type {string|undefined} */\n  export let style = undefined;\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {string|undefined} */\n  export let name = undefined;\n  /** @type {string|undefined} */\n  export let textIfInvalid = undefined;\n  /** @type {string|undefined} */\n  export let textIfValid = undefined;\n  /** @type {string|undefined} */\n  export let helperText = undefined;\n  /** @type {string} */\n  export let placeholder = \"\";\n  /** @type {boolean} */\n  export let optional = false;\n  /** @type {string} */\n  export let value;\n  /** @type {HTMLInputElement} */\n  export let ref = undefined;\n  /** @type {boolean} */\n  export let disabled = false;\n  /** @type {string|undefined} */\n  export let tooltip = undefined;\n  /** @type {string|undefined} @default \"off\" */\n  export let autocapitalize = \"off\";\n  /** @type {string|undefined} */\n  export let autocomplete = undefined;\n  /** @type {string|undefined} @default \"off\" */\n  export let autocorrect = \"off\";\n  /** @type {string|undefined} @default \"off\" */\n  export let spellcheck = \"off\";\n  /** @type {number|undefined} */\n  export let minlength = undefined;\n  /** @type {string|undefined} */\n  export let maxlength = undefined;\n\n  /** @type {string|undefined} */\n  export let requiredMarker = undefined;\n  /** @type {string|undefined} */\n  export let optionalMarker = undefined;\n\n  let refPassword;\n  let refText;\n  $: ref = refPassword || refText;\n\n  /** @type {'initial'|'valid'|'invalid'} */\n  export let state = \"initial\";\n\n  export let show = false;\n</script>\n\n<style>\n  .uk-form-icon.right {\n    right: 0;\n    left: auto;\n  }\n\n  .paddingRight {\n    padding-right: 4ch !important;\n  }</style>\n\n<Field\n  hasIcon={true}\n  inputId={id}\n  {requiredMarker}\n  {optionalMarker}\n  {label}\n  {state}\n  {style}\n  {className}\n  {textIfInvalid}\n  {textIfValid}\n  {helperText}\n  {optional}>\n  {#if !show}\n    <input\n      class:paddingRight={true}\n      {minlength}\n      {maxlength}\n      {autocapitalize}\n      {autocomplete}\n      {autocorrect}\n      {spellcheck}\n      {id}\n      {name}\n      bind:this={refPassword}\n      required={!optional}\n      {placeholder}\n      type=\"password\"\n      bind:value\n      {disabled}\n      uk-tooltip={tooltip}\n      on:input\n      on:change\n      on:blur\n      on:focus\n      class=\"uk-input\"\n      class:uk-form-danger={state === 'invalid'}\n      class:uk-form-success={state === 'valid'}\n      on:blur={() => (state = refPassword.checkValidity() ? 'valid' : 'invalid')}\n      on:focus={() => (state = 'initial')} />\n  {:else}\n    <input\n      class:paddingRight={true}\n      {minlength}\n      {maxlength}\n      {autocapitalize}\n      {autocomplete}\n      {autocorrect}\n      {spellcheck}\n      {id}\n      {name}\n      bind:this={refText}\n      required={!optional}\n      {placeholder}\n      type=\"text\"\n      bind:value\n      {disabled}\n      uk-tooltip={tooltip}\n      on:input\n      on:change\n      on:blur\n      on:focus\n      class=\"uk-input\"\n      class:uk-form-danger={state === 'invalid'}\n      class:uk-form-success={state === 'valid'}\n      on:blur={() => (state = refText.checkValidity() ? 'valid' : 'invalid')}\n      on:focus={() => (state = 'initial')} />\n  {/if}\n  <!-- svelte-ignore a11y-missing-attribute -->\n  <a role=\"button\" tabindex=\"0\" on:keyup={(e) => ['Enter'].includes(e.code) && (show = !show)} on:click={() => show = !show} class=\"uk-form-icon right\" uk-icon=\"icon: {show ? 'unlock' : 'lock'}\">&ZeroWidthSpace;</a>\n</Field>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  import { generateId } from \"../../services/html\";\n  import { globalOptionalMarker, globalRequiredMarker } from '../../stores/markers';\n\n  /** @type {string} */\n  export let id = generateId();\n  /** @type {string|undefined} */\n  export let label = undefined;\n  /** @type {string|undefined} */\n  export let name = undefined;\n  /** @type {any|undefined} */\n  export let value = undefined;\n  /** @type {Array<{value: any, label: string, disabled: boolean|undefined}>} */\n  export let options = [];\n  /** @type {boolean} */\n  export let disabled = false;\n  /** @type {boolean} */\n  export let optional = false;\n  /** @type {string|undefined} */\n  export let tooltip = undefined;\n  /** @type {HTMLDivElement} */\n  export let ref = undefined;\n  /** @type {undefined|'small'|'large'} */\n  export let size = undefined;\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** \n   * @default \"primary\"\n   * @description This property is used to style the button corresponding to the selected value with one of the base uikit classes for button appearance\n   * @type {'primary'|'secondary'|'danger'} */\n  export let variant = \"primary\";\n  /**\n   * @description A string specifying custom style properties for the component\n   * @type {string|undefined} */\n  export let style = undefined;\n\n  /** @type {string|undefined} */\n  export let requiredMarker = undefined;\n  /** @type {string|undefined} */\n  export let optionalMarker = undefined;\n\n  let suffix = '';\n  function updateLabelSuffix() {\n    if (optional) {\n      suffix = typeof optionalMarker === 'string'\n        ? optionalMarker\n        : $globalOptionalMarker;\n    } else {\n      suffix = typeof requiredMarker === 'string'\n        ? requiredMarker\n        : $globalRequiredMarker\n    }\n  }\n\n  $: optional, requiredMarker, optionalMarker, $globalRequiredMarker, $globalOptionalMarker, updateLabelSuffix();\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<style>\n  .disabled {\n    opacity: 0.7;\n  }\n  .radio-wrapper {\n    position: relative;\n  }\n  .radio-wrapper > select {\n    position: absolute;\n    top: 1rem;\n    left: 1rem;\n    opacity: 0;\n    pointer-events: none;\n    width: 0;\n    height: 0;\n    -webkit-appearance: none;\n       -moz-appearance: none;\n            appearance: none;\n  }</style>\n\n<div\n  {style}\n  class={className}\n  class:uk-margin-bottom={true}\n  class:custom-uk-radio-wrapper={true}\n  class:radio-wrapper={true}>\n  {#if label}\n    <label class=\"uk-form-label\" class:disabled for={id}>\n      {label}\n      {suffix}\n    </label>\n  {/if}\n  <div\n    {id}\n    class:disabled\n    uk-tooltip={tooltip}\n    bind:this={ref}\n    class:uk-flex={true}\n    class:uk-width-1-1={true}\n    class:uk-flex-wrap={true}>\n    {#each options as option (option)}\n      <div class=\"uk-flex-1\">\n        <button\n          disabled={disabled || option.disabled}\n          class:uk-text-nowrap={true}\n          class:uk-width-1-1={true}\n          class:uk-height-1-1={true}\n          class:custom-uk-active={option.value === value}\n          class:uk-button-primary={option.value === value && variant === 'primary'}\n          class:uk-button-secondary={option.value === value && variant === 'secondary'}\n          class:uk-button-danger={option.value === value && variant === 'danger'}\n          class:uk-button-default={option.value !== value}\n          class:uk-button-small={size === 'small'}\n          class:uk-button-large={size === 'large'}\n          class:uk-button={true}\n          type=\"button\"\n          on:click={() => {\n            if (!disabled && value !== option.value) {\n              value = option.value;\n              dispatch('change', value);\n            }\n          }}>\n          {option.label}\n        </button>\n      </div>\n    {/each}\n  </div>\n  <select tabindex=\"-1\" required={!optional} {disabled} {name}>\n    <option selected disaled value=\"\" />\n    {#each options as option, i (option)}\n      <option\n        selected={option.value === value}\n        value={i}\n        disabled={option.disabled || false}>\n        {option.label}\n      </option>\n    {/each}\n  </select>\n</div>\n",
    "<script>\n  import { generateId } from \"../../services/html\";\n  import Field from \"./Field.svelte\";\n\n  /** @type {string} */\n  export let id = generateId();\n  /** @type {string} */\n  export let label = \"\";\n  /** \n\t * @description A string specifying custom style properties for the component\n\t * @type {string|undefined} */\n  export let style = undefined;\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {string|undefined} */\n  export let name = undefined;\n  /** @type {string|undefined} */\n  export let textIfInvalid = undefined;\n  /** @type {string|undefined} */\n  export let textIfValid = undefined;\n  /** @type {string|undefined} */\n  export let helperText = undefined;\n  /** @type {string} */\n  export let placeholder = \"\";\n  /** @type {boolean} */\n  export let optional = false;\n  /** @type {string} */\n  export let value;\n  /** @type {HTMLInputElement} */\n  export let ref = undefined;\n  /** @type {boolean} */\n  export let disabled = false;\n  /** @type {string|undefined} */\n  export let tooltip = undefined;\n  /** @type {string|undefined} */\n  export let icon = undefined;\n  /** @type {'left'|'right'} */\n  export let iconPosition = \"left\";\n  /** @type {string|undefined} */\n  export let inputmode = undefined;\n  /** @type {string|undefined} */\n  export let pattern = undefined;\n  /** @type {string|undefined} */\n  export let autocapitalize = undefined;\n  /** @type {string|undefined} */\n  export let autocomplete = undefined;\n  /** @type {string|undefined} */\n  export let autocorrect = undefined;\n  /** @type {string|undefined} */\n  export let spellcheck = undefined;\n  /** @type {number|undefined} */\n  export let minlength = undefined;\n  /** @type {string|undefined} */\n  export let maxlength = undefined;\n\n  /** @type {string|undefined} */\n  export let requiredMarker = undefined;\n  /** @type {string|undefined} */\n  export let optionalMarker = undefined;\n\n  /** @type {'initial'|'valid'|'invalid'} */\n  export let state = \"initial\";\n</script>\n\n<style>\n  .uk-form-icon.right {\n    right: 0;\n    left: auto;\n  }\n\n  .paddingRight {\n    padding-right: 4ch !important;\n  }</style>\n\n<Field\n  hasIcon={!!icon}\n  inputId={id}\n  {requiredMarker}\n  {optionalMarker}\n  {label}\n  {state}\n  {style}\n  {className}\n  {textIfInvalid}\n  {textIfValid}\n  {helperText}\n  {optional}>\n  {#if iconPosition === 'left'}\n    {#if icon}<span class=\"uk-form-icon\" uk-icon=\"icon: {icon}\" />{/if}\n  {/if}\n  <input\n    {minlength}\n    {maxlength}\n    {autocapitalize}\n    {autocomplete}\n    {autocorrect}\n    {spellcheck}\n    {id}\n    {name}\n    {disabled}\n    uk-tooltip={tooltip}\n    bind:this={ref}\n    required={!optional}\n    {placeholder}\n    type=\"search\"\n    class:paddingRight={iconPosition === 'right'}\n    {inputmode}\n    {pattern}\n    bind:value\n    on:input\n    on:change\n    on:blur\n    on:focus\n    class=\"uk-input\"\n    class:uk-form-danger={state === 'invalid'}\n    class:uk-form-success={state === 'valid'}\n    on:blur={() => (state = ref.checkValidity() ? 'valid' : 'invalid')}\n    on:focus={() => (state = 'initial')} />\n  {#if iconPosition === 'right'}\n    {#if icon}<span class=\"uk-form-icon right\" uk-icon=\"icon: {icon}\" />{/if}\n  {/if}\n</Field>\n",
    "<script>\n  import { generateId } from \"../../services/html\";\n  import Field from \"./Field.svelte\";\n\n  /** @type {string} */\n  export let id = generateId();\n  /** @type {string} */\n  export let label = \"\";\n  /** \n\t * @description A string specifying custom style properties for the component\n\t * @type {string|undefined} */\n  export let style = undefined;\n  /** @type {string|undefined} */\n  export let className = undefined;\n  /** @type {string|undefined} */\n  export let name = undefined;\n  /** @type {string|undefined} */\n  export let textIfInvalid = undefined;\n  /** @type {string|undefined} */\n  export let textIfValid = undefined;\n  /** @type {string|undefined} */\n  export let helperText = undefined;\n  /** @type {string} */\n  export let placeholder = \"\";\n  /** @type {boolean} */\n  export let optional = false;\n  /** @type {string} */\n  export let value;\n  /** @type {HTMLInputElement} */\n  export let ref = undefined;\n  /** @type {boolean} */\n  export let disabled = false;\n  /** @type {string|undefined} */\n  export let tooltip = undefined;\n  /** @type {string|undefined} */\n  export let icon = undefined;\n  /** @type {'left'|'right'} */\n  export let iconPosition = \"left\";\n  /** @type {string|undefined} */\n  export let inputmode = undefined;\n  /** @type {string|undefined} */\n  export let pattern = undefined;\n  /** @type {string|undefined} */\n  export let autocapitalize = undefined;\n  /** @type {string|undefined} */\n  export let autocomplete = undefined;\n  /** @type {string|undefined} */\n  export let autocorrect = undefined;\n  /** @type {string|undefined} */\n  export let spellcheck = undefined;\n  /** @type {number|undefined} */\n  export let minlength = undefined;\n  /** @type {string|undefined} */\n  export let maxlength = undefined;\n\n  /** @type {string|undefined} */\n  export let requiredMarker = undefined;\n  /** @type {string|undefined} */\n  export let optionalMarker = undefined;\n  \n  /** @type {'initial'|'valid'|'invalid'} */\n  export let state = \"initial\";\n</script>\n\n<style>\n  .uk-form-icon.right {\n    right: 0;\n    left: auto;\n  }\n\n  .paddingRight {\n    padding-right: 4ch !important;\n  }</style>\n\n<Field\n  hasIcon={!!icon}\n  inputId={id}\n  {requiredMarker}\n  {optionalMarker}\n  {label}\n  {state}\n  {className}\n  {style}\n  {textIfInvalid}\n  {textIfValid}\n  {helperText}\n  {optional}>\n  {#if iconPosition === 'left'}\n    {#if icon}<span class=\"uk-form-icon\" uk-icon=\"icon: {icon}\" />{/if}\n  {/if}\n  <input\n    {minlength}\n    {maxlength}\n    {autocapitalize}\n    {autocomplete}\n    {autocorrect}\n    {spellcheck}\n    {id}\n    {name}\n    {disabled}\n    uk-tooltip={tooltip}\n    bind:this={ref}\n    required={!optional}\n    {placeholder}\n    type=\"text\"\n    class:paddingRight={iconPosition === 'right'}\n    {inputmode}\n    {pattern}\n    bind:value\n    on:change\n    on:keydown\n    on:input\n    class=\"uk-input\"\n    class:uk-form-danger={state === 'invalid'}\n    class:uk-form-success={state === 'valid'}\n    on:blur\n    on:blur={() => (state = ref.checkValidity() ? 'valid' : 'invalid')}\n    on:focus={() => (state = 'initial')}\n    on:focus />\n  {#if iconPosition === 'right'}\n    {#if icon}<span class=\"uk-form-icon right\" uk-icon=\"icon: {icon}\" />{/if}\n  {/if}\n</Field>\n"
  ],
  "names": [],
  "mappings": "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"
}